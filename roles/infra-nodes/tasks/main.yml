---
# This playbook setusp up the machineset yaml file.
# Only one section will run.
# update group_vars/all (global variable) for AWS or AZURE.

#---------- AZURE Section below ---------------------#

- name: Render AZURE infra machineset
  template:
    src: templates/azure-infra.yaml.j2
    dest: "{{ role_path }}/files/{{ item.name }}-{{ region }}-{{ item.az }}.yaml"
  with_items: "{{azure_machinesets}}"
  when: cloud == "Azure"

- name: Create AZURE infra machineset
  k8s:
    state: present
    src: "{{ role_path }}/files/{{ item.name }}-{{ region}}-{{ item.az }}.yaml"
    merge_type: 
      - strategic-merge
      - merge     
  with_items: "{{azure_machinesets}}"
  when: cloud == "Azure"

#---------- AWS Section below ---------------------#

- name: Render AWS infra machineset
  template:
    src: templates/aws-infra.yaml.j2
    dest: "{{ role_path }}/files/{{ item.name }}-{{ region }}{{ item.az }}.yaml"  
  with_items: "{{aws_machinesets}}"
  when: cloud == "AWS"

- name: Create AWS infra machineset
  k8s:
    state: present
    src: "{{ role_path }}/files/{{ item.name }}-{{ region }}{{ item.az }}.yaml"
    merge_type: 
      - strategic-merge
      - merge     
  with_items: "{{aws_machinesets}}"
  when: cloud == "AWS"


#---------- Wait for infra nodes to be ready ---------------------#

- name: Count the number of infra machines
  shell: KUBECONFIG='{{ kube_config }}' oc get machines -l machine.openshift.io/cluster-api-machine-role=infra -n openshift-machine-api | grep -v NAME | wc -l | xargs echo -n
  register: result

- name: Wait for infra nodes to become ready
  shell: KUBECONFIG={{ kube_config }} oc get nodes -l node-role.kubernetes.io/infra | egrep "\sReady" | wc -l | xargs echo -n
  register: count
  until: count.stdout.find("{{ item }}") != -1
  retries: 300
  delay: 10
  with_items: '{{ result.stdout }}'

#---------- MCP creation -------------------------#

- name: Create Machine Config Pool for INFRA nodes
  k8s:
    api_version: machineconfiguration.openshift.io/v1
    state: present
    kind: MachineConfigPool
    merge_type: 
      - strategic-merge
      - merge     
    definition:
      metadata:
        name: infra
      spec:
        machineConfigSelector:
          matchExpressions:
            - {key: machineconfiguration.openshift.io/role, operator: In, values: [worker,infra]}
        nodeSelector:
          matchLabels:
            node-role.kubernetes.io/infra: ""

- name: Wait for infra nodes to become ready
  shell: KUBECONFIG={{ kube_config }} oc get mcp infra -o=jsonpath='{.status.readyMachineCount}{"\n"}'
  register: count
  until: count.stdout.find("{{ item }}") != -1
  retries: 300
  delay: 10
  with_items: '{{ result.stdout }}'

#---------- Move resources to Infra nodes ---------------------#

- name: Move Routers to Infra nodes
  k8s:
    api_version: operator.openshift.io/v1
    state: present
    kind: IngressController
    name: default
    namespace: openshift-ingress-operator
    merge_type: 
      - strategic-merge
      - merge     
    definition:
      spec:
        replicas: 3
        nodePlacement:
          nodeSelector:
            matchLabels:
              node-role.kubernetes.io/infra: ""
          tolerations:
          - effect: NoSchedule
            key: infra
            value: reserved
          - effect: NoExecute
            key: infra
            value: reserved

- name: Move Registry to Infra nodes
  k8s:
    api_version: imageregistry.operator.openshift.io/v1
    state: present
    kind: Config
    name: cluster
    namespace: openshift-ingress-operator
    merge_type: 
      - strategic-merge
      - merge     
    definition:
      spec:
        nodeSelector:
          node-role.kubernetes.io/infra: ""
        tolerations:
        - effect: NoSchedule
          key: infra
          value: reserved
        - effect: NoExecute
          key: infra
          value: reserved

- name: Move Monitoring to Infra nodes
  k8s:
    api_version: v1
    state: present
    kind: ConfigMap
    name: cluster-monitoring-config
    namespace: openshift-monitoring
    merge_type: 
      - strategic-merge
      - merge     
    definition:
      data:
        config.yaml: |+
          alertmanagerMain:
            volumeClaimTemplate:
              spec:
                storageClassName: {{ storage_class }}
                volumeMode: Filesystem 
                resources:
                  requests:
                    storage: {{ prom_pv_size }}
            nodeSelector:
              node-role.kubernetes.io/infra: ""
            tolerations:
            - key: infra
              value: reserved
              effect: NoSchedule
            - key: infra
              value: reserved
              effect: NoExecute
          prometheusK8s:
            volumeClaimTemplate:
              spec:
                storageClassName: {{ storage_class }}
                volumeMode: Filesystem
                resources:
                  requests:
                    storage: {{ prom_pv_size }}
            nodeSelector:
              node-role.kubernetes.io/infra: ""
            tolerations:
            - key: infra
              value: reserved
              effect: NoSchedule
            - key: infra
              value: reserved
              effect: NoExecute
          prometheusOperator:
            nodeSelector:
              node-role.kubernetes.io/infra: ""
            tolerations:
            - key: infra
              value: reserved
              effect: NoSchedule
            - key: infra
              value: reserved
              effect: NoExecute
          grafana:
            nodeSelector:
              node-role.kubernetes.io/infra: ""
            tolerations:
            - key: infra
              value: reserved
              effect: NoSchedule
            - key: infra
              value: reserved
              effect: NoExecute
          k8sPrometheusAdapter:
            nodeSelector:
              node-role.kubernetes.io/infra: ""
            tolerations:
            - key: infra
              value: reserved
              effect: NoSchedule
            - key: infra
              value: reserved
              effect: NoExecute
          kubeStateMetrics:
            nodeSelector:
              node-role.kubernetes.io/infra: ""
            tolerations:
            - key: infra
              value: reserved
              effect: NoSchedule
            - key: infra
              value: reserved
              effect: NoExecute
          telemeterClient:
            nodeSelector:
              node-role.kubernetes.io/infra: ""
            tolerations:
            - key: infra
              value: reserved
              effect: NoSchedule
            - key: infra
              value: reserved
              effect: NoExecute
          openshiftStateMetrics:
            nodeSelector:
              node-role.kubernetes.io/infra: ""
            tolerations:
            - key: infra
              value: reserved
              effect: NoSchedule
            - key: infra
              value: reserved
              effect: NoExecute


- name: Remove files from files directory
  file:
    path: "{{ role_path }}/files/{{ item.name }}-{{ region }}-{{ item.az }}.yaml"
    state: absent
  with_items: "{{azure_machinesets}}"
  when: cloud == "Azure"

- name: Remove files from files directory
  file:
    path: "{{ role_path }}/files/{{ item.name }}-{{ region }}{{ item.az }}.yaml"
    state: absent
  with_items: "{{aws_machinesets}}"
  when: cloud == "AWS"

- name: Set Machine Healthchecker for infra Azure
  k8s:
    api_version: machine.openshift.io/v1beta1
    state: present
    merge_type: 
      - strategic-merge
      - merge
    kind: MachineHealthCheck
    name: '{{ cluster_name }}-{{ item.name }}-{{ region }}{{ item.az }}'   
    namespace: openshift-machine-api
    definition:
      spec:
        selector:
          matchLabels:
            machine.openshift.io/cluster-api-cluster: '{{ cluster_name }}'
            machine.openshift.io/cluster-api-machine-role: infra 
            machine.openshift.io/cluster-api-machine-type: infra 
            machine.openshift.io/cluster-api-machineset: '{{ cluster_name }}-{{ item.name }}-{{ region }}{{ item.az }}' 
        unhealthyConditions:
        - type:    "Ready"
          timeout: "300s"
          status: "False"
        - type:    "Ready"
          timeout: "300s"
          status: "Unknown"
        maxUnhealthy: "40%"
  with_items: "{{azure_machinesets}}"
  when: cloud == "Azure"

- name: Set Machine Healthchecker for worker Azure
  k8s:
    api_version: machine.openshift.io/v1beta1
    state: present
    merge_type: 
      - strategic-merge
      - merge
    kind: MachineHealthCheck
    name: '{{ cluster_name }}-worker-{{ region }}{{ item.az }}'   
    namespace: openshift-machine-api
    definition:
      spec:
        selector:
          matchLabels:
            machine.openshift.io/cluster-api-cluster: '{{ cluster_name }}'
            machine.openshift.io/cluster-api-machine-role: worker 
            machine.openshift.io/cluster-api-machine-type: worker 
            machine.openshift.io/cluster-api-machineset: '{{ cluster_name }}-worker-{{ region }}{{ item.az }}' 
        unhealthyConditions:
        - type:    "Ready"
          timeout: "300s"
          status: "False"
        - type:    "Ready"
          timeout: "300s"
          status: "Unknown"
        maxUnhealthy: "40%" 
  with_items: "{{azure_machinesets}}"
  when: cloud == "Azure"

- name: Set Machine Healthchecker for infra AWS
  k8s:
    api_version: machine.openshift.io/v1beta1
    state: present
    merge_type: 
      - strategic-merge
      - merge
    kind: MachineHealthCheck
    name: '{{ cluster_name }}-{{ item.name }}-{{ region }}{{ item.az }}'   
    namespace: openshift-machine-api
    definition:
      spec:
        selector:
          matchLabels:
            machine.openshift.io/cluster-api-cluster: '{{ cluster_name }}'
            machine.openshift.io/cluster-api-machine-role: infra 
            machine.openshift.io/cluster-api-machine-type: infra 
            machine.openshift.io/cluster-api-machineset: '{{ cluster_name }}-{{ item.name }}-{{ region }}{{ item.az }}' 
        unhealthyConditions:
        - type:    "Ready"
          timeout: "300s"
          status: "False"
        - type:    "Ready"
          timeout: "300s"
          status: "Unknown"
        maxUnhealthy: "40%"
  with_items: "{{aws_machinesets}}"
  when: cloud == "AWS"

- name: Set Machine Healthchecker for worker AWS
  k8s:
    api_version: machine.openshift.io/v1beta1
    state: present
    merge_type: 
      - strategic-merge
      - merge
    kind: MachineHealthCheck
    name: '{{ cluster_name }}-worker-{{ region }}{{ item.az }}'   
    namespace: openshift-machine-api
    definition:
      spec:
        selector:
          matchLabels:
            machine.openshift.io/cluster-api-cluster: '{{ cluster_name }}'
            machine.openshift.io/cluster-api-machine-role: worker 
            machine.openshift.io/cluster-api-machine-type: worker 
            machine.openshift.io/cluster-api-machineset: '{{ cluster_name }}-worker-{{ region }}{{ item.az }}' 
        unhealthyConditions:
        - type:    "Ready"
          timeout: "300s"
          status: "False"
        - type:    "Ready"
          timeout: "300s"
          status: "Unknown"
        maxUnhealthy: "40%" 
  with_items: "{{aws_machinesets}}"
  when: cloud == "AWS"