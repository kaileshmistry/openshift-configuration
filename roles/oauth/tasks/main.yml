---
- name: Authentication via HTPasswd
  block:
    - name: Build HTPASSWD file
      htpasswd:
        state: present
        path: "{{ role_path }}/files/htpassword"
        name: "{{ item.value.username }}"
        password: "redhat1"
      with_dict: "{{ groups_and_users }}"
    
    - name: Create htpassword secret
      k8s:
        state: present
        api_version: v1
        kind: Secret
        namespace: openshift-config
        name: htpasswd
        merge_type: 
          - strategic-merge
          - merge     
        definition:
          type: Opaque
          data:
            htpasswd: "{{ lookup('file', role_path + '/files/htpassword') | b64encode }}"
    
    - name: Create htpassword oauth config
      k8s:
        state: present
        api_version: config.openshift.io/v1
        kind: OAuth
        name: cluster
        merge_type: 
          - strategic-merge
          - merge     
        definition:
          spec:
            identityProviders:
              - htpasswd:
                  fileData:
                    name: htpasswd
                mappingMethod: claim
                name: htpasswd
                type: HTPasswd
    
    # Make developer namespaces 
    
    - name: Create namespaces
      k8s:
        state: present
        kind: namespace
        name: '{{ item }}'
        merge_type: 
          - strategic-merge
          - merge     
      loop: '{{ project_names }}'
    
    # Create groups
    
    - name: Create cluster_admin_group user Group
      k8s:
        state: present
        api_version: user.openshift.io/v1
        kind: Group
        name: '{{ item.value.group_name }}'
        merge_type: 
          - strategic-merge
          - merge     
      with_dict: '{{ groups_and_users }}'
    
    
    ## Bind Roles to groups
    
    - name: Bind cluster-admin role to the Openshift Admins group
      k8s:
        state: present
        api_version: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        name: cluster-admin-cluster-admin-crb
        namespace: openshift-config
        merge_type: 
          - strategic-merge
          - merge     
        definition:
          metadata:
            annotations:
              rbac.authorization.kubernetes.io/autoupdate: "true"  
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: cluster-admin
          subjects:
          - apiGroup: rbac.authorization.k8s.io
            kind: Group
            name: '{{ groups_and_users.cluster_admin.group_name }}'
    
    - name: Bind cluster-reader role to the Cluster Reader
      k8s:
        state: present
        api_version: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        name: cluster-admin-cluster-reader-crb
        namespace: openshift-config
        merge_type: 
          - strategic-merge
          - merge     
        definition:
          metadata:
            annotations:
              rbac.authorization.kubernetes.io/autoupdate: "true"  
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: cluster-reader
          subjects:
          - apiGroup: rbac.authorization.k8s.io
            kind: Group
            name: '{{ groups_and_users.cluster_reader.group_name }}'
    
    - name: Bind admin role to the Developer group
      k8s:
        state: present
        api_version: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        name: developer-group-rb
        namespace: '{{ item }}' 
        merge_type: 
          - strategic-merge
          - merge     
        definition:
          metadata:
            annotations:
              rbac.authorization.kubernetes.io/autoupdate: "true"
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: admin
          subjects:
          - apiGroup: rbac.authorization.k8s.io
            kind: Group
            name: '{{ groups_and_users.developer.group_name }}'
      loop: '{{ project_names }}'
    
    - name: Bind view role to the Tester group
      k8s:
        state: present
        api_version: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        name: tester-group-rb
        namespace: '{{ item }}'
        merge_type: 
          - strategic-merge
          - merge     
        definition:
          metadata:
            annotations:
              rbac.authorization.kubernetes.io/autoupdate: "true"
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: view
          subjects:
          - apiGroup: rbac.authorization.k8s.io
            kind: Group
            name: '{{ groups_and_users.tester.group_name }}'
      loop: '{{ project_names }}'
    
    ## Add Users to groups
    
    - name: Bind Users to Groups
      k8s:
        state: present
        api_version: user.openshift.io/v1
        name: "{{ item.value.group_name }}"
        kind: Group
        merge_type: 
          - strategic-merge
          - merge     
        definition:
          users:
          - "{{ item.value.username }}"
      with_dict: '{{ groups_and_users }}'
    
    
    - name: Remove file from tmp directory
      file:
        path: "{{ role_path }}/files/htpassword"
        state: absent
  when: auth == "HTPasswd"

- name: Authentication via AD
  block:

#    - name: Build HTPASSWD file
#      htpasswd:
#        state: present
#        path: "{{ role_path }}/files/htpassword"
#        name: "{{ item.value.username }}"
#        password: "redhat1"
#      with_dict: "{{ groups_and_users }}"
#    
#    - name: Create htpassword secret
#      k8s:
#        state: present
#        api_version: v1
#        kind: Secret
#        namespace: openshift-config
#        name: htpasswd
#        merge_type: 
#          - strategic-merge
#          - merge     
#        definition:
#          type: Opaque
#          data:
#            htpasswd: "{{ lookup('file', role_path + '/files/htpassword') | b64encode }}"
  when: auth == "AD"
